{"version":3,"sources":["../../js/wrlu-lib/wrLuLib.js"],"names":["app","config","fbService","fbProvider","fb","graphMsgURL","pageToken","appSecret","verifyToken","dfService","dfProvider","gcp","projectId","clientEmail","privateKey","languageCode","sessionIds","Map","response","globalResponse","webhookUri","start","bind","setSession","handleResponse","handleFbEvent","handleDfResponse","handleDfAction","handleDefault","callback","setWebhook","res","err","code","status","payload","senderID","has","set","uuid","v1","it","keys","sender","next","value","console","log","origin","event","JSON","stringify","id","read","type","recipientID","recipient","timeOfMessage","timestamp","message","isEcho","messageId","appId","metadata","messageText","messageAttachments","quickReply","is_echo","mid","app_id","text","attachments","quick_reply","sendTypingOn","sendTextQueryToApiAi","responseText","fulfillmentText","messages","fulfillmentMessages","action","contexts","outputContexts","parameters","params","handleMessages","sendTextMessage","result","resolvedQuery"],"mappings":"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","file":"wrLuLib.js","sourcesContent":["\nimport fbProvider from './providers/facebook/fbProvider'\nimport dfProvider from './providers/dialogflow/dfProvider'\nimport uuid from 'uuid'\nimport { globalResponse } from './models/commonObjects'\n\n/** WrLu Chatbot lib\n * \n * @name        WrLu Chatbot lib\n * \n * @description Anonymus class to set and interact with a DialogFlow chatbot\n *              using API V2 & Facebook on version { 0.0.1 }.\n *              Future releases may expect another 3rth party chat platform\n *              up to Telegram or Slack.\n *              \n *              This lib is created to Node JS, you need to have you own\n *              DialogFlow bot prebuilded. Documentation is in process.\n * \n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @param {*} app \n * @param {Object} config  This param is about the initial config for \n *                         Facebook & DialogFlow service, the structure for the var\n *                         may be the following.\n * \n *                          {\n *                              fb:{\n *                                  pageToken: '',\n *                                  verifyToken: '',\n *                                  appID: '',\n *                                  appSecret: '',\n *                                  graphMsgURL: 'https://graph.facebook.com/v2.6/me/messages'\n *                              },\n *                              gcp:{\n *                                  projectId: '',\n *                                  clientEmail: '',\n *                                  privateKey: '',\n *                                  languageCode: ''\n *                              }\n *                              webhookUri:''\n *                          }\n *                        \n */\n\nexport default class {\n    constructor(app, config){\n        this.app = app;\n        this.fbService = new fbProvider(config.fb.graphMsgURL, config.fb.pageToken, config.fb.appSecret, config.fb.verifyToken);\n        this.dfService = new dfProvider(config.gcp.projectId, config.gcp.clientEmail, config.gcp.privateKey, config.gcp.languageCode);\n        this.sessionIds = new Map();\n        this.response = globalResponse;\n        this.webhookUri = config.webhookUri ? config.webhookUri : '/webhook/';\n\n        this.start = this.start.bind(this);\n        this.setSession = this.setSession.bind(this);\n\n        this.handleResponse = this.handleResponse.bind(this);\n        this.handleFbEvent = this.handleFbEvent.bind(this);\n        this.handleDfResponse = this.handleDfResponse.bind(this);\n        this.handleDfAction = this.handleDfAction.bind(this);\n        this.handleDefault = this.handleDefault.bind(this);\n    }\n\n    /** Start bot\n     * \n     * @param {*} app \n     * @param {Function} callback Function that will return on exec and init the bot\n     */\n    start(app, callback){\n        try{\n            this.fbService.setWebhook(app, (res) => {\n                this.handleResponse(res, callback);\n                \n            });    \n        }catch(err){\n            this.response.code = 500;\n            this.response.status = 'error';\n            this.response.payload = `An error ocurred on setting fb service function: start() --- Error: ${err}`;\n            callback(this.response);\n            return;\n        }    \n    }\n\n    /** Set session\n     * \n     * @description Get the sender for setting a session for the live transactions\n     * \n     * @param {*} senderID \n     * \n     * \n     */\n    setSession(senderID) {\n        if (!this.sessionIds.has(senderID)) {\n            this.sessionIds.set(senderID, uuid.v1());\n        }\n    }\n\n    /** Get Sender\n     * \n     * @description Getting & validate sender for public use\n     * \n     */\n    getSender(){\n        try{\n            let it = this.sessionIds.keys();\n            let sender = it.next().value;\n\n            if(this.sessionIds.has(sender)){\n                return sender;\n            }else{\n                throw 'Sorry!, Invalid sender.';\n            }\n        }catch(err){\n            console.log(`Something was wrong of getting sender. Error: ${err}`);\n        }   \n    }\n\n    /** Handle Response\n     * \n     * @param {*} res \n     * @param {Function} callback \n     * \n     * @description Using for handle the response from the 3rd party chat\n     *              provider, in this case: Facebook. Just facebook is used\n     *              on version { 0.0.1 }.\n     * \n     * \n     */\n    handleResponse(res, callback){\n        try{\n            switch(res.origin){\n                case 'facebook':{\n                    if(res.code === 200){\n                        this.handleFbEvent(res.payload, callback);\n                    }\n                }\n            }\n        }catch(err){\n            this.response.code = 500;\n            this.response.status = 'error';\n            this.response.payload = `An error ocurred on function: handleResponse() --- Error: ${err}`;\n            callback(this.response);\n            return;\n        }\n    }\n\n    /** HandleFbEvent\n     * \n     * @description function for using handle the facebook event\n     *              comming from Fb API\n     * \n     * @param {*} event \n     * @param {Function} callback \n     * \n     */\n    handleFbEvent(event, callback) {\n        \n        console.log(`Handling FB event, event: \\n ${JSON.stringify(event)}`);\n        // console.log(JSON.stringify(event));\n\n        let senderID = {};\n\n        try{\n            senderID = event.sender.id;\n            this.setSession(senderID);\n        }catch(err){\n            console.log(`An error ocurred trying set session : ${err}`);\n            this.response.code = 500;\n            this.response.status = 'error';\n            this.response.payload = `An error ocurred trying set session function: handleFBEvent() --- Error: ${err}`;\n            callback(this.response);\n            return;\n        }\n        \n        try{\n            let payload = {};\n            \n\n            if(event.read){\n                payload = {\n                    type: 'read',\n                    senderID: senderID,\n                    read: event.read\n                };                \n                this.response.payload = payload;\n                callback(this.response);\n                return;\n            }\n\n            var recipientID = event.recipient.id;\n            var timeOfMessage = event.timestamp;\n            var message = event.message;\n\n            var isEcho = \"\";\n            var messageId = \"\";\n            var appId = \"\";\n            var metadata = \"\";\n            \n            var messageText = \"\";\n            var messageAttachments = \"\";\n            var quickReply = \"\";\n            \n\n            if(message){\n\n                isEcho = message.is_echo;\n                messageId = message.mid;\n                appId = message.app_id;\n                metadata = message.metadata;\n\n\n                /**\n                 * \n                 * @description You can get text or attachments, not both\n                 */\n\n                messageText = message.text;\n                messageAttachments = message.attachments;\n                quickReply = message.quick_reply;\n\n                payload = {\n                    type: '',\n                    senderID: senderID,\n                    messageId: messageId,\n                    appId: appId,\n                    metadata: metadata\n                };                \n            }\n\n            this.response.code = 200;\n            this.response.status = 'success';\n            this.response.origin = 'fbEvent';\n\n            if (isEcho) {\n                payload.type = 'echo';\n                this.response.payload = payload;\n                callback(this.response);\n                return;\n            } else if (quickReply) {\n                this.fbService.sendTypingOn(senderID);\n                payload.type = 'quickReply';\n                payload.quickReply = quickReply;\n                this.response.payload = payload;\n                callback(this.response);\n                return;\n            }\n\n            this.fbService.sendTypingOn(senderID);\n\n            if (messageText) {\n                this.dfService.sendTextQueryToApiAi(this.sessionIds, this.handleDfResponse, senderID, messageText, callback);\n                return;\n            } else if (messageAttachments) {\n                payload.type = 'attachments';\n                payload.attachments = messageAttachments;\n                this.response.payload = payload;\n                callback(this.response);\n                return;\n            }            \n        \n        }catch(err){\n            console.log(`An error ocurred on handling facebook event; error: ${err}`);\n        }\n\n    }\n\n    /** HandleDfResponse\n     * \n     * @description handle dialog flow response from the API (Df API V2)\n     * \n     * @param {*} sender \n     * @param {*} response \n     * @param {Function} callback \n     */\n    handleDfResponse(sender, response, callback) {\n        \n        console.log('Handling dialog flow response');\n        // console.log(JSON.stringify(response));\n\n        let responseText = response.fulfillmentText;\n      \n        let messages = response.fulfillmentMessages;\n        let action = response.action;\n        let contexts = response.outputContexts;\n        let parameters = response.parameters;\n      \n\n        let payload = {\n            sender: sender,\n            messages: messages,\n            contexts: contexts,\n            params: parameters,\n            type: ''\n        };\n\n        try{\n            if (action) {\n                this.response.code = 200;\n                this.response.status = 'success';\n                payload.type = 'action';\n                payload.action = action;\n\n            } else if (messages) {\n    \n                this.response.code = 200;\n                this.response.status = 'success';\n                payload.type = 'messages';\n    \n                this.fbService.handleMessages(messages,sender);\n    \n            } else if (responseText) {\n                \n                this.response.code = 200;\n                this.response.status = 'success';\n                payload.type = 'responseText';\n                \n                this.fbService.sendTextMessage(sender, responseText);\n            } else if (responseText == '' && !action) {\n                /**\n                 * @description On this case, DialogFlow coudn't evaluate the input, showing the unsolved query.\n                 */\n                console.log('Unknown query' + response.result.resolvedQuery);\n                this.fbService.sendTextMessage(sender, \"I'm not sure what you want. Can you be more specific?\");\n                \n                this.response.code = 500;\n                this.response.status = 'error';\n                this.response.payload = 'Unknown query' + response.result.resolvedQuery;\n            }\n    \n            this.response.payload = payload;\n            this.response.origin = 'dfResponse';\n\n            if(callback){\n                callback(this.response);\n                return;\n            }else{\n                console.log('Callback undefined');\n                return this.response;\n            }\n\n        }catch(err){\n            console.log(`An error ocurred : ${err}, method: handleDfResponse`);\n            this.response.code = 500;\n            this.response.status = 'error';\n            this.response.payload = `An error ocurred function: handleDfResponse() --- Error: ${err}`;\n            if(callback){\n                callback(this.response);\n                return;\n            }else{\n                return;\n            }\n        }\n    }\n\n    /** HandleDfAction\n     * \n     * \n     * @param {*} sender \n     * @param {*} action \n     * @param {Array} messages \n     * @param {*} contexts \n     * @param {*} parameters \n     * \n     */\n    handleDfAction(sender, action, messages, contexts, parameters) {\n\n        switch (action) {\n            default:\n                //unhandled action, just send back the text\n                this.fbService.handleMessages(messages, sender);\n        }\n    }\n\n    /** HandleDefault\n     * \n     * \n     * @param {*} response \n     */\n    handleDefault(response){\n        try{\n            console.log('Handling response by default option');\n            // console.log(JSON.stringify(response));\n            switch(response.payload.type)\n            {\n                case 'action':{\n                    this.fbService.handleMessages(response.payload.messages, response.payload.sender);\n                    break;\n                }\n                case 'messages':{\n                    this.fbService.handleMessages(response.payload.messages, response.payload.sender);\n                    break;\n                }\n                case 'quickReply':{\n                    return this.dfService.sendTextQueryToApiAi(this.sessionIds, this.handleDfResponse, response.payload.senderID, response.payload.quickReply.payload);\n                    break;\n                }\n                case 'echo':{\n                    console.log('Echo recieved');\n                    /* PENDING */\n                    // this.fbService.handleEcho(response.payload.messageId, response.payload.appId, response.payload.metadata);\n                    break;\n                }\n            }\n        }catch(err){\n            console.log(`An error ocurred : ${err}, method: handleDefault. Response: ${JSON.stringify(response)} `);\n        }\n    }\n}"]}