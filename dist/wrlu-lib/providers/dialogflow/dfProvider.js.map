{"version":3,"sources":["../../../../js/wrlu-lib/providers/dialogflow/dfProvider.js"],"names":["googleProjectId","clientEmail","privateKey","languageCode","credentials","client_email","private_key","sessionClient","dialogflow","SessionsClient","projectId","sendTextQueryToApiAi","bind","sendEventToApiAi","sessionIds","handleApiAiResponse","sender","text","callback","params","sessionPath","get","request","session","queryInput","queryParams","payload","data","detectIntent","responses","result","queryResult","event","name","parameters","structjson","jsonToStructProto"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AAiBI,oBAAYA,eAAZ,EAA6BC,WAA7B,EAA0CC,UAA1C,EAA8E;AAAA,YAAvBC,YAAuB,uEAAR,OAAQ;;AAAA;;AAG1E,YAAIC,cAAc;AACdC,0BAAcJ,WADA;AAEdK,yBAAaJ;AAFC,SAAlB;;AAKA,aAAKF,eAAL,GAAuBA,eAAvB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKI,aAAL,GAAqB,IAAIC,qBAAWC,cAAf,CAA8B;AAC/CC,uBAAWV,eADoC;AAE/CI;AAF+C,SAA9B,CAArB;;AAKA,aAAKO,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,aAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AAED;;;;;;;;;;;;;;;;;;;;gGAe2BE,U,EAAYC,mB,EAAqBC,M,EAAQC,I,EAAMC,Q;oBAAUC,M,uEAAS,E;;;;;;AACnFC,2C,GAAc,KAAKb,aAAL,CAAmBa,WAAnB,CAA+B,KAAKpB,eAApC,EAAqDc,WAAWO,GAAX,CAAeL,MAAf,CAArD,C;AAEdM,uC,GAAU;AACZC,6CAASH,WADG;AAEZI,gDAAY;AACRP,8CAAM;AACFA,kDAAMA,IADJ;AAEFd,0DAAc,KAAKA;AAFjB;AADE,qCAFA;AAQZsB,iDAAa;AACTC,iDAAS;AACLC,kDAAMR;AADD;AADA;AARD,iC;;uCAcQ,KAAKZ,aAAL,CAAmBqB,YAAnB,CAAgCN,OAAhC,C;;;AAAlBO,yC;AACAC,sC,GAASD,UAAU,CAAV,EAAaE,W;;qCAEzBb,Q;;;;;AACCH,oDAAoBC,MAApB,EAA4Bc,MAA5B,EAAoCZ,QAApC;;;;;iEAEOH,oBAAoBC,MAApB,EAA4Bc,MAA5B,C;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;;;;;;;;;;;kGAeuBhB,U,EAAYC,mB,EAAqBC,M,EAAQgB,K,EAAOd,Q;oBAAUC,M,uEAAS,E;;;;;;AAChFC,2C,GAAc,KAAKb,aAAL,CAAmBa,WAAnB,CAA+B,KAAKpB,eAApC,EAAqDc,WAAWO,GAAX,CAAeL,MAAf,CAArD,C;AACdM,uC,GAAU;AACZC,6CAASH,WADG;AAEZI,gDAAY;AACRQ,+CAAO;AACHC,kDAAMD,KADH;AAEHE,wDAAYC,qBAAWC,iBAAX,CAA6BjB,MAA7B,CAFT,EAE+C;AAClDhB,0DAAc,KAAKA;AAHhB;AADC;AAFA,iC;;uCAYQ,KAAKI,aAAL,CAAmBqB,YAAnB,CAAgCN,OAAhC,C;;;AAAlBO,yC;AAEAC,sC,GAASD,UAAU,CAAV,EAAaE,W;;AAC5BhB,oDAAoBC,MAApB,EAA4Bc,MAA5B,EAAoCZ,QAApC","file":"dfProvider.js","sourcesContent":["import dialogflow from 'dialogflow'\nimport structjson from './structjson'\n\n/**\n * \n * \n * @description Anonymus class to get the functions for using DialogFlow API.\n *              on version { 0.0.1 }. This class was created for using with Fb API,\n *              in next versions would be released for more platforms as Telegram.\n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @argument {String} googleProjectId           Google ID Project for using as a key to \n *                                              auth on DialogFlow API.\n * \n * @argument {String} clientEmail               Email using on google cloud (service account)\n *                          |                   for setting dialogflow project\n * \n * @argument {String} privateKey                Private key from google credentials for the\n *                                              DialogFlow project\n * \n * @argument {String} languageCode              Language Code for using on DialogFlow\n *                                              default \"en-US\"\n */\n\nexport default class {\n    \n    constructor(googleProjectId, clientEmail, privateKey,  languageCode = 'en-US'){\n        \n        \n        let credentials = {\n            client_email: clientEmail,\n            private_key: privateKey\n        };\n\n        this.googleProjectId = googleProjectId;\n        this.clientEmail = clientEmail;\n        this.privateKey = privateKey;\n        this.languageCode = languageCode;\n        this.sessionClient = new dialogflow.SessionsClient({\n            projectId: googleProjectId,\n            credentials\n        });\n        \n        this.sendTextQueryToApiAi = this.sendTextQueryToApiAi.bind(this);\n        this.sendEventToApiAi = this.sendEventToApiAi.bind(this);\n    }\n\n    /** Send a text query to DialogFlow API\n     * \n     * \n     * @method sendTextQueryToApiAi()          \n     *  \n     * @param {String} sessionIds               Ids for actual session for send to API\n     * @param {Function} handleApiAiResponse    CallBack for handle response\n     * @param {*} sender                        Sender identifier\n     * @param {String} text                     Simple text to send\n     * @param {Function} callback               Function for returning callback on future life wrlu-ciclyng life\n     * @param {Object} params                   API params\n     * \n     * @returns callback handleApiAiResponse()\n     * \n     */\n    async sendTextQueryToApiAi(sessionIds, handleApiAiResponse, sender, text, callback, params = {}) {\n        const sessionPath = this.sessionClient.sessionPath(this.googleProjectId, sessionIds.get(sender));\n\n        const request = {\n            session: sessionPath,\n            queryInput: {\n                text: {\n                    text: text,\n                    languageCode: this.languageCode,\n                },\n            },\n            queryParams: {\n                payload: {\n                    data: params\n                }\n            }\n        };\n        const responses = await this.sessionClient.detectIntent(request);\n        const result = responses[0].queryResult;\n\n        if(callback){\n            handleApiAiResponse(sender, result, callback);\n        }else{\n            return handleApiAiResponse(sender, result);\n        }\n    }\n\n    /** Send an event to DialogFlow API\n     * \n     * \n     * @method sendEventToApiAi()\n     * \n     * @param {String} sessionIds                   Ids for actual session for send to API\n     * @param {Function} handleApiAiResponse        CallBack for handle response\n     * @param {*} sender                            Sender identifier\n     * @param {Event} event                         Event to send\n     * @param {Object} params                       API params\n     * @param {Function} callback                   Callback for life-ciclyng\n     * \n     * @returns callback handleApiAiResponse()\n     * \n     */\n    async sendEventToApiAi(sessionIds, handleApiAiResponse, sender, event, callback, params = {}) {\n        const sessionPath = this.sessionClient.sessionPath(this.googleProjectId, sessionIds.get(sender));\n        const request = {\n            session: sessionPath,\n            queryInput: {\n                event: {\n                    name: event,\n                    parameters: structjson.jsonToStructProto(params), //Dialogflow's v2 API uses gRPC. You'll need a jsonToStructProto method to convert your JavaScript object to a proto struct.\n                    languageCode: this.languageCode,\n                },\n            }\n        };\n \n \n        const responses = await this.sessionClient.detectIntent(request);\n \n        const result = responses[0].queryResult;\n        handleApiAiResponse(sender, result, callback);\n \n    }\n}\n"]}