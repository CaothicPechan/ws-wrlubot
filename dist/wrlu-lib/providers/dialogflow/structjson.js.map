{"version":3,"sources":["../../../../js/wrlu-lib/providers/dialogflow/structjson.js"],"names":["jsonToStructProto","json","fields","k","jsonValueToProto","JSON_SIMPLE_TYPE_TO_PROTO_KIND_MAP","JSON_SIMPLE_VALUE_KINDS","Set","value","valueProto","kind","nullValue","Array","listValue","values","map","structValue","console","warn","structProtoToJson","proto","valueProtoToJson","has","JSON","stringify","module","exports"],"mappings":"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","file":"structjson.js","sourcesContent":["/**\n * Copyright 2017, Google, Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for converting between JSON and goog.protobuf.Struct\n * proto.\n */\n\n'use strict';\n\nfunction jsonToStructProto(json) {\n  const fields = {};\n  for (let k in json) {\n    fields[k] = jsonValueToProto(json[k]);\n  }\n\n  return {fields};\n}\n\nconst JSON_SIMPLE_TYPE_TO_PROTO_KIND_MAP = {\n  [typeof 0]: 'numberValue',\n  [typeof '']: 'stringValue',\n  [typeof false]: 'boolValue',\n};\n\nconst JSON_SIMPLE_VALUE_KINDS = new Set([\n  'numberValue',\n  'stringValue',\n  'boolValue',\n]);\n\nfunction jsonValueToProto(value) {\n  const valueProto = {};\n\n  if (value === null) {\n    valueProto.kind = 'nullValue';\n    valueProto.nullValue = 'NULL_VALUE';\n  } else if (value instanceof Array) {\n    valueProto.kind = 'listValue';\n    valueProto.listValue = {values: value.map(jsonValueToProto)};\n  } else if (typeof value === 'object') {\n    valueProto.kind = 'structValue';\n    valueProto.structValue = jsonToStructProto(value);\n  } else if (typeof value in JSON_SIMPLE_TYPE_TO_PROTO_KIND_MAP) {\n    const kind = JSON_SIMPLE_TYPE_TO_PROTO_KIND_MAP[typeof value];\n    valueProto.kind = kind;\n    valueProto[kind] = value;\n  } else {\n    console.warn('Unsupported value type ', typeof value);\n  }\n  return valueProto;\n}\n\nfunction structProtoToJson(proto) {\n  if (!proto || !proto.fields) {\n    return {};\n  }\n  const json = {};\n  for (const k in proto.fields) {\n    json[k] = valueProtoToJson(proto.fields[k]);\n  }\n  return json;\n}\n\nfunction valueProtoToJson(proto) {\n  if (!proto || !proto.kind) {\n    return null;\n  }\n\n  if (JSON_SIMPLE_VALUE_KINDS.has(proto.kind)) {\n    return proto[proto.kind];\n  } else if (proto.kind === 'nullValue') {\n    return null;\n  } else if (proto.kind === 'listValue') {\n    if (!proto.listValue || !proto.listValue.values) {\n      console.warn('Invalid JSON list value proto: ', JSON.stringify(proto));\n    }\n    return proto.listValue.values.map(valueProtoToJson);\n  } else if (proto.kind === 'structValue') {\n    return structProtoToJson(proto.structValue);\n  } else {\n    console.warn('Unsupported JSON value proto kind: ', proto.kind);\n    return null;\n  }\n}\n\nmodule.exports = {\n  jsonToStructProto,\n  structProtoToJson,\n};"]}