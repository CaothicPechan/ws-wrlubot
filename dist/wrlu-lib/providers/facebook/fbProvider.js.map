{"version":3,"sources":["../../../../js/wrlu-lib/providers/facebook/fbProvider.js"],"names":["graphMsgURL","pageToken","appSecret","verifyToken","webhookUri","constants","graphMsAttURL","wrResponse","handleMessage","bind","handleMessages","handleCardMessages","receivedMessageRead","receivedAccountLink","receivedAuthentication","receivedDeliveryConfirmation","setWebhook","callSendAPI","sendFileMessage","sendButtonMessage","sendGenericMessage","sendTextMessage","sendReceiptMessage","sendQuickReply","sendAccountLinking","verifyRequestSignature","app","callback","console","log","use","bodyParser","json","verify","get","req","res","query","status","send","error","sendStatus","post","data","body","object","entry","forEach","pageEntry","pageID","id","timeOfEvent","time","messaging","messagingEvent","optin","message","payload","eventType","delivery","postback","read","account_linking","sender","text","map","replies","quickReplies","reply","push","title","image","imageUri","messages","cardTypes","messageObj","length","elements","m","buttons","b","card","isLink","substring","button","element","subtitle","event","senderID","recipientID","recipient","watermark","sequenceNumber","seq","authCode","authorization_code","messageIDs","mids","messageID","timeOfAuth","timestamp","passThroughParam","ref","buf","signature","headers","Error","split","method","signatureHash","expectedHash","crypto","createHmac","update","digest","recipientId","messageData","recipient_name","currency","payment_method","address","summary","adjustments","receiptId","Math","floor","random","attachment","type","template_type","order_number","metadata","quick_replies","url","sendReadReceipt","sender_action","sendTypingOn","sendTypingOff","authUri","attach","uri","qs","access_token","response","statusCode","recipient_id","messageId","message_id","JSON","stringify"],"mappings":"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","file":"fbProvider.js","sourcesContent":["import request from 'request'\nimport crypto from 'crypto'\nimport bodyParser from 'body-parser'\nimport { wrResponse } from '../../models/commonObjects';\nimport { sleep } from '../../utils/utils'\n\n\n/**\n * \n * \n * @description Anonymus class to get the functions for using Facebook API.\n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @argument {String} graphMsgURL       URL from Facebook Graph API\n * @argument {String} pageToken         Facebook token page\n * @argument {String} appSecret         App key secret from facebook app\n * @argument {String} verifyToken       Verify Token from facebook app\n * @argument {String} webhookUri        URL for setting the webhook for verifying fb request\n *                                      default = '@/webhook/'\n */\n\nexport default class {\n    constructor(graphMsgURL, pageToken, appSecret, verifyToken, webhookUri = '/webhook/'){\n        this.constants = {};\n        this.constants.graphMsgURL = `${graphMsgURL}messages`\n        this.constants.graphMsAttURL = `${graphMsgURL}message_attachments`\n        this.constants.pageToken = pageToken;\n        this.constants.appSecret = appSecret;\n        this.constants.verifyToken = verifyToken;\n        this.constants.webhookUri = webhookUri;\n        \n        this.wrResponse = wrResponse;\n\n        this.handleMessage = this.handleMessage.bind(this);\n        this.handleMessages = this.handleMessages.bind(this);\n        this.handleCardMessages = this.handleCardMessages.bind(this);\n\n        this.receivedMessageRead = this.receivedMessageRead.bind(this);\n        this.receivedAccountLink = this.receivedAccountLink.bind(this);\n        this.receivedAuthentication = this. receivedAuthentication.bind(this);\n        this.receivedDeliveryConfirmation = this.receivedDeliveryConfirmation.bind(this);\n        \n        this.setWebhook = this.setWebhook.bind(this);\n        this.callSendAPI = this.callSendAPI.bind(this);\n\n        this.sendFileMessage = this.sendFileMessage.bind(this);\n        this.sendButtonMessage = this.sendButtonMessage.bind(this);\n        this.sendGenericMessage = this.sendGenericMessage.bind(this);\n        this.sendTextMessage = this.sendTextMessage.bind(this);\n        this.sendReceiptMessage = this.sendReceiptMessage.bind(this);\n        this.sendQuickReply = this.sendQuickReply.bind(this);\n        this.sendAccountLinking = this.sendAccountLinking.bind(this);\n\n        this.verifyRequestSignature = this.verifyRequestSignature.bind(this);\n\n    }\n\n    /** Init methods **\n     * \n     * \n     */\n        /** Set Webhook\n         * \n         * @description setting facebook webwook for \n         * catchin' fb events\n         * \n         * @param {*} app actual app node module \n         * @param {Function} callback Function for callback when \n         *                            some event gets handled\n         */\n        setWebhook(app, callback){\n\n            console.log('Setting webhook')\n\n            /** Verifying Facebook Request **/\n            app.use(bodyParser.json({\n                verify: this.verifyRequestSignature\n            }))\n\n            app.get(this.constants.webhookUri, (req, res) => {\n                if (req.query['hub.mode'] === 'subscribe' && req.query['hub.verify_token'] === this.constants.verifyToken) {\n                    res.status(200).send(req.query['hub.challenge']);\n                } else {\n                    console.error(\"Failed validation. Make sure the validation tokens match.\");\n                    res.sendStatus(403);\n                }\n            });\n\n            app.post(this.constants.webhookUri,(req, res) => {\n                var data = req.body;\n\n                // Make sure this is a page subscription                \n                if (data.object == 'page') {\n\n                    /**\n                     * Iterate over each entry \n                     * There may be multiple if batched\n                     * */\n                     \n                    data.entry.forEach((pageEntry) => {\n                        var pageID = pageEntry.id;\n                        var timeOfEvent = pageEntry.time;\n                        \n                        pageEntry.messaging.forEach((messagingEvent) => {\n                            if (messagingEvent.optin) {\n                                this.receivedAuthentication(messagingEvent,callback);\n                            } else if (messagingEvent.message) {\n                                console.log('FbProvider: Message event received');\n                                this.wrResponse.payload = messagingEvent;\n                                this.wrResponse.eventType = 'message';\n                                callback(this.wrResponse);\n                            } else if (messagingEvent.delivery) {\n                                this.receivedDeliveryConfirmation(messagingEvent,callback);\n                            } else if (messagingEvent.postback) {\n                                console.log('FbProvider: Message event postback received');\n                                this.wrResponse.payload = messagingEvent;\n                                this.wrResponse.eventType = 'postback';\n                                callback(this.wrResponse);\n                            } else if (messagingEvent.read) {\n                                this.receivedMessageRead(messagingEvent,callback);\n                            } else if (messagingEvent.account_linking) {\n                                this.receivedAccountLink(messagingEvent,callback);\n                            } else {\n                                console.log(\"FbProvier: Webhook received unknown messagingEvent: \", messagingEvent);\n                            }\n                        });\n                    });\n\n                    res.sendStatus(200);\n                }\n            });\n\n        }\n    \n    /** Handle methods **\n     * \n     */\n        /** Handle message\n         * \n         * @param {String} message \n         * @param {String} sender   Sender identifier\n         */\n        handleMessage(message, sender){\n            switch (message.message) {\n                case \"text\": \n                    message.text.text.map( text => {\n                        if (text !== '') {\n                            this.sendTextMessage(sender, text);\n                        }\n                    });\n                    break;\n                case \"quickReplies\": \n                    let replies = [];\n                    message.quickReplies.quickReplies.map((text) => {\n                        let reply =\n                            {\n                                \"content_type\": \"text\",\n                                \"title\": text,\n                                \"payload\": text\n                            }\n                        replies.push(reply);\n                    });\n                    this.sendQuickReply(sender, message.quickReplies.title, replies);\n                    break;\n                case \"image\":\n                    this.sendFileMessage(sender, message.image.imageUri, 'image');\n                    break;\n                case \"video\":\n                    this.sendFileMessage(sender, message.image.imageUri, 'video');\n                    break;\n                case \"audio\":\n                    this.sendFileMessage(sender, message.image.imageUri, 'audio');\n                    break;\n                case \"file\":\n                    this.sendFileMessage(sender, message.image.imageUri, 'file');\n                    break;\n                default:\n                    console.log(`Can't handle message response, message: ${message}`);\n            }\n        }\n\n        /** Handle messages\n         * \n         * @param {Array} messages \n         * @param {String} sender \n         */\n        handleMessages(messages, sender){\n            let cardTypes = [];\n            \n            messages.map( messageObj => {\n                if(messageObj.message == 'card'){\n                    cardTypes.push(messageObj);\n                }\n            })\n\n            messages.map( messageObj => {\n                sleep(1000);\n                if(messageObj.message != 'card'){\n                    this.handleMessage(messageObj,sender);\n                }\n            });\n\n            if(cardTypes.length > 0){\n                sleep(100);\n                this.handleCardMessages(cardTypes,sender);\n            }\n\n        }\n        \n        /** Handle cards messages\n         * \n         * @param {Array} messages \n         * @param {String} sender \n         */\n        handleCardMessages(messages, sender){\n            let elements = [];\n            for (var m = 0; m < messages.length; m++) {\n                let message = messages[m];\n        \n                let buttons = [];\n                for (var b = 0; b < message.card.buttons.length; b++) {\n                    let isLink = (message.card.buttons[b].postback.substring(0, 4) === 'http');\n                    let button;\n                    if (isLink) {\n                        button = {\n                            \"type\": \"web_url\",\n                            \"title\": message.card.buttons[b].text,\n                            \"url\": message.card.buttons[b].postback\n                        }\n                    } else {\n                        button = {\n                            \"type\": \"postback\",\n                            \"title\": message.card.buttons[b].text,\n                            \"payload\": message.card.buttons[b].postback\n                        }\n                    }\n                    buttons.push(button);\n                }\n        \n        \n                let element = {\n                    \"title\": message.card.title,\n                    \"image_url\":message.card.imageUri,\n                    \"subtitle\": message.card.subtitle,\n                    \"buttons\": buttons\n                };\n                elements.push(element);\n            }\n            \n            this.sendGenericMessage(sender, elements);\n        }\n\n\n    /** Events Section **\n     *\n     *  @description Events functions.\n     */\n\n        /** Message Read Event\n         * \n         * @param {*} event\n         * \n         * @description This event is called when a previously-sent message has been read.\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read\n         *\n         */\n        receivedMessageRead(event, callback){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n\n            // All messages before watermark (a timestamp) or sequence have been seen.\n            var watermark = event.read.watermark;\n            var sequenceNumber = event.read.seq;\n\n            console.log(\"FbProvider: Received message read event for watermark %d and sequence \" +\n                \"number %d\", watermark, sequenceNumber);\n\n            this.wrResponse.payload = event;\n            this.wrResponse.eventType = 'recieved-message';\n            callback(this.wrResponse);\n        }\n\n        /** Account Link Event\n         * \n         *\n         * @description This event is called when the Link Account or UnLink Account action has been\n         * tapped.\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking\n         *\n         */\n        receivedAccountLink(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n\n            var status = event.account_linking.status;\n            var authCode = event.account_linking.authorization_code;\n\n            console.log(\"FbProvider: Received account link event with for user %d with status %s \" +\n                \"and auth code %s \", senderID, status, authCode);\n\n            this.wrResponse.payload = event;\n            this.wrResponse.eventType = 'account-link';\n            callback(this.wrResponse);\n        }\n\n        /** Delivery Confirmation Event\n         * \n         *\n         * @description This event is sent to confirm the delivery of a message. Read more about\n         * these fields at @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered\n         *\n         */\n        receivedDeliveryConfirmation(event, callback){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n            var delivery = event.delivery;\n            var messageIDs = delivery.mids;\n            var watermark = delivery.watermark;\n            var sequenceNumber = delivery.seq;\n\n            if (messageIDs) {\n                messageIDs.forEach((messageID) => {\n                    console.log(\"FbProvider: Received delivery confirmation for message ID: %s\",\n                        messageID);\n                });\n            }\n\n            console.log(\"FbProvider: All message before %d were delivered.\", watermark);\n            \n            this.wrResponse.payload = event;\n            this.wrResponse.eventType = 'delivery-confirm';\n            callback(this.wrResponse);\n        }\n\n        /** Authorization Event\n         *\n         * @description The value for 'optin.ref' is defined in the entry point. For the \"Send to\n         * Messenger\" plugin, it is the 'data-ref' field. Read more at\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication\n         *\n         * The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n         * The developer can set this to an arbitrary value to associate the\n         * authentication callback with the 'Send to Messenger' click event. This is\n         * a way to do account linking when the user clicks the 'Send to Messenger'\n         * plugin.\n         * \n         * \n         * When an authentication is received, we'll send a message back to the sender\n         * to let them know it was successful.\n         * \n         */\n        receivedAuthentication(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n            var timeOfAuth = event.timestamp;\n            var passThroughParam = event.optin.ref;\n\n            console.log(\"FbProvider: Received authentication for user %d and page %d with pass \" +\n                \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n                timeOfAuth);\n\n            this.sendTextMessage(senderID, \"Authentication successful\");\n\n            this.wrResponse.payload = event;\n            this.wrResponse.eventType = 'delivery-confirm';\n            callback(this.wrResponse);\n        }\n\n        /** Verify that the callback came from Facebook. \n         * @description Using the App Secret from\n         * the App Dashboard, we can verify the signature that is sent with each\n         * callback in the x-hub-signature field, located in the header.\n         *\n         * @link https://developers.facebook.com/docs/graph-api/webhooks#setup\n         *\n         */\n        \n        verifyRequestSignature(req, res, buf){\n            var signature = req.headers[\"x-hub-signature\"];\n            console.log('FbProvider: Verifying RequestSignature');\n            if (!signature) {\n                throw new Error('FbProvider: Couldn\\'t validate the signature.');\n            } else {\n                var elements = signature.split('=');\n                var method = elements[0];\n                var signatureHash = elements[1];\n\n                var expectedHash = crypto.createHmac('sha1', this.constants.appSecret)\n                    .update(buf)\n                    .digest('hex');\n\n                if (signatureHash != expectedHash) {\n                    throw new Error(\"FbProvider: Couldn't validate the request signature.\");\n                    console.log(\"FbProvider: Couldn't validate the request signature.\");\n                }\n            }\n        }\n\n        /** Send Text Message\n         * \n         * @param {String} recipientId \n         * @param {String} text \n         */\n        sendTextMessage(recipientId, text){\n            sleep(1000);\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    text: text\n                }\n            }\n            this.callSendAPI(messageData);\n        }\n\n        /** Send receipt message\n         * \n         * @param {*} recipientId \n         * @param {*} recipient_name \n         * @param {*} currency \n         * @param {*} payment_method \n         * @param {*} timestamp \n         * @param {*} elements \n         * @param {*} address \n         * @param {*} summary \n         * @param {*} adjustments \n         */\n        sendReceiptMessage(recipientId, recipient_name, currency, payment_method,timestamp, elements, address, summary, adjustments){\n\n            var receiptId = \"order\" + Math.floor(Math.random() * 1000);\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"receipt\",\n                            recipient_name: recipient_name,\n                            order_number: receiptId,\n                            currency: currency,\n                            payment_method: payment_method,\n                            timestamp: timestamp,\n                            elements: elements,\n                            address: address,\n                            summary: summary,\n                            adjustments: adjustments\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send quick reply\n         * \n         * @param {*} recipientId \n         * @param {*} text \n         * @param {*} replies \n         * @param {*} metadata \n         */\n        sendQuickReply(recipientId, text, replies, metadata){\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    text: text,\n                    metadata: metadata ? metadata : '',\n                    quick_replies: replies\n                }\n            };\n            this.callSendAPI(messageData);\n        }\n        \n        /** Send file message\n         * \n         * @description Function for sending file/media mesasages\n         * video/audio/gif/image/file\n         * \n         * @template type Type of files using by facebook: image,video,file\n         * check fb documentation.\n         * \n         * @param {*} recipientId \n         * @param {String} url \n         * @param {String} type \n         */\n        sendFileMessage(recipientId, url, type){\n            let messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: type,\n                        payload: {\n                            url: url\n                        }\n                    }\n                }\n            };\n            this.callSendAPI(messageData,true);\n        }\n\n       \n        /** Send button message\n         * \n         * @param {*} recipientId \n         * @param {*} text \n         * @param {*} buttons \n         */\n        sendButtonMessage(recipientId, text, buttons){\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"button\",\n                            text: text,\n                            buttons: buttons\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send Generic Message\n         * \n         * @param {*} recipientId \n         * @param {*} elements \n         */\n        sendGenericMessage(recipientId, elements){\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"generic\",\n                            elements: elements\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        } \n        \n        /**Send a read receipt to indicate the message has been read\n         * \n         * @param {*} recipientId \n         */\n        sendReadReceipt(recipientId) {\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"mark_seen\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /**Turn typing indicator on\n         * \n         * @param {*} recipientId \n         */\n        sendTypingOn(recipientId){            \n            console.log(\"Turning typing indicator on\");\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"typing_on\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /**Turn typing indicator off\n         * \n         * @param {*} recipientId \n         */\n        sendTypingOff(recipientId){\n            console.log(\"Turning typing indicator off\");\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"typing_off\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send a message with the account linking call-to-action\n         * \n         * @param {*} recipientId \n         */\n        sendAccountLinking(recipientId, text, authUri){\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"button\",\n                            text: text,\n                            buttons: [{\n                                type: \"account_link\",\n                                url: authUri + \"/authorize\"\n                            }]\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Call the Send API.\n         * \n         * @description The message data goes in the body. If successful, we'll\n         * get the message id in a response\n         * \n         * @param {*} messageData \n         */\n        callSendAPI(messageData, attach = false){\n\n            let url = attach ? this.constants.graphMsAttURL : this.constants.graphMsgURL;\n\n            request({\n                uri: this.constants.graphMsgURL,\n                qs: {\n                    access_token: this.constants.pageToken\n                },\n                method: 'POST',\n                json: messageData\n\n            },(error, response, body) => {\n                if (!error && response.statusCode == 200) {\n                    var recipientId = body.recipient_id;\n                    var messageId = body.message_id;\n\n                    if (messageId) {\n                        console.log(\"FbProvider: Successfully sent message with id %s to recipient %s\",\n                            messageId, recipientId);\n                    } else {\n                        console.log(\"FbProvider: Successfully called Send API for recipient %s\",\n                            recipientId);\n                    }\n                } else {\n                    console.log(\"FbProvider: Failed calling Send API\");\n                    console.log(JSON.stringify(response.body));\n                }\n            });\n        }\n}"]}